{"version":3,"sources":["components/About.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["iconStyle","background","color","icon","react_default","a","createElement","style","width","heigth","About","Container_default","className","Card_default","Header","Body","Image_default","thumbnail","rounded","src","data","aboutMe","flat","map","p","k","Text","key","dist_es6","timeLine","reverse","e","date","title","body","image","url","alt","links","l","href","target","rel","label","backgroundColor","App","Navbar_default","collapseOnSelect","expand","bg","variant","Brand","role","aria-label","Toggle","aria-controls","Collapse","id","Nav_default","Link","components_About","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.15964d16.chunk.js","sourcesContent":["import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Image from \"react-bootstrap/Image\";\nimport {\n  VerticalTimeline,\n  VerticalTimelineElement\n} from \"react-vertical-timeline-component\";\n// import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n// import { faCoffee } from \"@fortawesome/free-solid-svg-icons\";\n\nimport \"react-vertical-timeline-component/style.min.css\";\nimport data from \"../data.json\";\n\nconst iconStyle = { background: \"rgb(33, 150, 243)\", color: \"#fff\" };\nconst icon = <div style={{ width: 24, heigth: 24 }} />;\n\nconst About = () => {\n  return (\n    <Container className=\"my-3 px-0\">\n      <Card className=\"bg-dark text-light\">\n        <Card.Header>\n          <h2>About Me</h2>\n        </Card.Header>\n        <Card.Body>\n          <div className=\"clearfix\">\n            <Image\n              className=\"float-left mr-3\"\n              thumbnail={false}\n              rounded={true}\n              src=\"../old/mug.jpg\"\n            />\n            {[data.aboutMe].flat().map((p, k) => (\n              <Card.Text key={k}>{p}</Card.Text>\n            ))}\n          </div>\n          <VerticalTimeline>\n            {data.timeLine.reverse().map((e, k) => (\n              <VerticalTimelineElement\n                key={k}\n                className=\"vertical-timeline-element--work\"\n                iconStyle={iconStyle}\n                icon={icon}\n                date={e.date}\n              >\n                <h2>{e.title}</h2>\n                {[e.body].flat().map((p, k) => (\n                  <p key={k}>{p}</p>\n                ))}\n                {e.image && (\n                  <img\n                    width={320}\n                    src={e.image.url}\n                    alt={e.image.title}\n                    className=\"img-thumbnail\"\n                  />\n                )}\n                <div>\n                  {e.links &&\n                    e.links.map((l, k) => (\n                      <span key={k} style={{ color: \"black\" }}>\n                        {\"[\"}\n                        <a\n                          href={l.url}\n                          target=\"_blank\"\n                          rel=\"noopener noreferrer\"\n                        >\n                          {l.label}\n                        </a>\n                        {\"] \"}\n                      </span>\n                    ))}\n                </div>\n              </VerticalTimelineElement>\n            ))}\n            <VerticalTimelineElement\n              className=\"vertical-timeline-element--work\"\n              iconStyle={{\n                backgroundColor: \"lawngreen\"\n              }}\n            />\n          </VerticalTimeline>\n        </Card.Body>\n      </Card>\n    </Container>\n  );\n};\n\nexport default About;\n","import React from \"react\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nimport \"./App.css\";\nimport About from \"./About\";\n\nfunction App() {\n  return (\n    <Container className=\"px-0\">\n      <Navbar collapseOnSelect expand=\"md\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">\n          <span role=\"img\" aria-label=\"White and Nerdy\">\n            üë±üèª‚Äç\n          </span>\n          Jonathan Meyer\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav>\n            <Nav.Link href=\"https://github.com/jonathan-meyer\" target=\"_blank\">\n              GitHub\n            </Nav.Link>\n            <Nav.Link href=\"http://zorkonline.net\" target=\"_blank\">\n              Zorkonline\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <About />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}