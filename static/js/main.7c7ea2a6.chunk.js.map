{"version":3,"sources":["components/About.jsx","components/JoyPixels.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["iconStyle","background","color","icon","react_default","a","createElement","style","width","height","About","state","data","_this2","this","request","get","then","_ref","body","setState","Container_default","className","Card_default","Header","Body","Image_default","thumbnail","rounded","src","avatar","aboutMe","flat","map","p","k","Text","key","dist_es6","timeLine","reverse","e","date","title","image","url","alt","links","l","href","target","rel","label","backgroundColor","React","Component","childrenToImage","children","Array","isArray","child","join","toImage","props","JoyPixels","dangerouslySetInnerHTML","__html","App","Navbar_default","collapseOnSelect","expand","bg","variant","Brand","components_JoyPixels","Toggle","aria-controls","Collapse","id","Nav_default","Link","components_About","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7c7ea2a6.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Image from \"react-bootstrap/Image\";\n\nimport request from \"superagent\";\n\nimport {\n  VerticalTimeline,\n  VerticalTimelineElement\n} from \"react-vertical-timeline-component\";\n\nimport \"react-vertical-timeline-component/style.min.css\";\n\nconst iconStyle = { background: \"rgb(33, 150, 243)\", color: \"#fff\" };\nconst icon = <div style={{ width: 48, height: 48 }} />;\n\nclass About extends React.Component {\n  state = { data: null };\n\n  componentDidMount() {\n    request.get(\"/data.json\").then(({ body }) => {\n      this.setState({ data: body });\n    });\n  }\n\n  render() {\n    const { data } = this.state;\n\n    return (\n      <Container className=\"my-3 px-0\">\n        <Card className=\"bg-dark text-light\">\n          <Card.Header>\n            <h2>About Me</h2>\n          </Card.Header>\n          <Card.Body>\n            <div className=\"clearfix\">\n              <Image\n                className=\"float-left mr-3\"\n                thumbnail={false}\n                rounded={true}\n                src={data && data.avatar}\n              />\n              {data &&\n                [data.aboutMe]\n                  .flat()\n                  .map((p, k) => <Card.Text key={k}>{p}</Card.Text>)}\n            </div>\n            {data && (\n              <VerticalTimeline>\n                {data.timeLine.reverse().map((e, k) => (\n                  <VerticalTimelineElement\n                    key={k}\n                    className=\"vertical-timeline-element--work\"\n                    iconStyle={iconStyle}\n                    icon={icon}\n                    date={e.date}\n                  >\n                    <h2>{e.title}</h2>\n                    {[e.body].flat().map((p, k) => (\n                      <p key={k}>{p}</p>\n                    ))}\n                    {e.image && (\n                      <img\n                        width={320}\n                        src={e.image.url}\n                        alt={e.image.title}\n                        className=\"img-thumbnail\"\n                      />\n                    )}\n                    <div>\n                      {e.links &&\n                        e.links.map((l, k) => (\n                          <span key={k} style={{ color: \"black\" }}>\n                            {\"[\"}\n                            <a\n                              href={l.url}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                            >\n                              {l.label}\n                            </a>\n                            {\"] \"}\n                          </span>\n                        ))}\n                    </div>\n                  </VerticalTimelineElement>\n                ))}\n                <VerticalTimelineElement\n                  className=\"vertical-timeline-element--work\"\n                  iconStyle={{\n                    backgroundColor: \"lawngreen\"\n                  }}\n                />\n              </VerticalTimeline>\n            )}\n          </Card.Body>\n        </Card>\n      </Container>\n    );\n  }\n}\n\nexport default About;\n","import React from \"react\";\nimport { toImage } from \"emoji-toolkit\";\n\nconst childrenToImage = children => {\n  if (Array.isArray(children)) {\n    return children.map(child => childrenToImage(child)).join(\"\\n\");\n  }\n\n  if (typeof children === \"object\") {\n    return toImage(children.props.children);\n  }\n\n  return toImage(children);\n};\n\nclass JoyPixels extends React.Component {\n  render() {\n    const { children } = this.props;\n\n    return (\n      <span dangerouslySetInnerHTML={{ __html: childrenToImage(children) }} />\n    );\n  }\n}\n\nexport default JoyPixels;\n","import React from \"react\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\n\nimport \"./App.css\";\nimport About from \"./About\";\nimport JoyPixels from \"./JoyPixels\";\n\nfunction App() {\n  return (\n    <Container className=\"px-0\">\n      <Navbar collapseOnSelect expand=\"md\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"/\">\n          <JoyPixels>:blond_haired_person_tone1:</JoyPixels>\n          Jonathan Meyer\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav>\n            <Nav.Link href=\"https://github.com/jonathan-meyer\" target=\"_blank\">\n              GitHub\n            </Nav.Link>\n            <Nav.Link\n              href=\"https://www.linkedin.com/in/jonathan-meyer-4a6845a\"\n              target=\"_blank\"\n            >\n              LinkedIn\n            </Nav.Link>\n            <Nav.Link href=\"http://zorkonline.net\" target=\"_blank\">\n              Zorkonline\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n      <About />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\n\nimport App from \"./components/App\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}